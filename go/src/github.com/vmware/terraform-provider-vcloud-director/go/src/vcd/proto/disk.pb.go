// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/disk.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateDiskInfo struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size           string `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
	BusType        string `protobuf:"bytes,3,opt,name=bus_type,json=busType" json:"bus_type,omitempty"`
	BusSubType     string `protobuf:"bytes,4,opt,name=bus_sub_type,json=busSubType" json:"bus_sub_type,omitempty"`
	Description    string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	StorageProfile string `protobuf:"bytes,6,opt,name=storage_profile,json=storageProfile" json:"storage_profile,omitempty"`
	Vdc            string `protobuf:"bytes,7,opt,name=vdc" json:"vdc,omitempty"`
	DiskId         string `protobuf:"bytes,8,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
}

func (m *CreateDiskInfo) Reset()                    { *m = CreateDiskInfo{} }
func (m *CreateDiskInfo) String() string            { return proto1.CompactTextString(m) }
func (*CreateDiskInfo) ProtoMessage()               {}
func (*CreateDiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CreateDiskInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDiskInfo) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *CreateDiskInfo) GetBusType() string {
	if m != nil {
		return m.BusType
	}
	return ""
}

func (m *CreateDiskInfo) GetBusSubType() string {
	if m != nil {
		return m.BusSubType
	}
	return ""
}

func (m *CreateDiskInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateDiskInfo) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

func (m *CreateDiskInfo) GetVdc() string {
	if m != nil {
		return m.Vdc
	}
	return ""
}

func (m *CreateDiskInfo) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

type CreateDiskResult struct {
	Created bool   `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	DiskId  string `protobuf:"bytes,2,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
}

func (m *CreateDiskResult) Reset()                    { *m = CreateDiskResult{} }
func (m *CreateDiskResult) String() string            { return proto1.CompactTextString(m) }
func (*CreateDiskResult) ProtoMessage()               {}
func (*CreateDiskResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CreateDiskResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *CreateDiskResult) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

type DeleteDiskInfo struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DiskId string `protobuf:"bytes,2,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	Vdc    string `protobuf:"bytes,3,opt,name=vdc" json:"vdc,omitempty"`
}

func (m *DeleteDiskInfo) Reset()                    { *m = DeleteDiskInfo{} }
func (m *DeleteDiskInfo) String() string            { return proto1.CompactTextString(m) }
func (*DeleteDiskInfo) ProtoMessage()               {}
func (*DeleteDiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DeleteDiskInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteDiskInfo) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

func (m *DeleteDiskInfo) GetVdc() string {
	if m != nil {
		return m.Vdc
	}
	return ""
}

type DeleteDiskResult struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *DeleteDiskResult) Reset()                    { *m = DeleteDiskResult{} }
func (m *DeleteDiskResult) String() string            { return proto1.CompactTextString(m) }
func (*DeleteDiskResult) ProtoMessage()               {}
func (*DeleteDiskResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DeleteDiskResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type ReadDiskInfo struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DiskId string `protobuf:"bytes,2,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	Vdc    string `protobuf:"bytes,3,opt,name=vdc" json:"vdc,omitempty"`
}

func (m *ReadDiskInfo) Reset()                    { *m = ReadDiskInfo{} }
func (m *ReadDiskInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReadDiskInfo) ProtoMessage()               {}
func (*ReadDiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ReadDiskInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadDiskInfo) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

func (m *ReadDiskInfo) GetVdc() string {
	if m != nil {
		return m.Vdc
	}
	return ""
}

type ReadDiskResult struct {
	Present bool   `protobuf:"varint,1,opt,name=present" json:"present,omitempty"`
	DiskId  string `protobuf:"bytes,2,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
}

func (m *ReadDiskResult) Reset()                    { *m = ReadDiskResult{} }
func (m *ReadDiskResult) String() string            { return proto1.CompactTextString(m) }
func (*ReadDiskResult) ProtoMessage()               {}
func (*ReadDiskResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ReadDiskResult) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func (m *ReadDiskResult) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

func init() {
	proto1.RegisterType((*CreateDiskInfo)(nil), "proto.CreateDiskInfo")
	proto1.RegisterType((*CreateDiskResult)(nil), "proto.CreateDiskResult")
	proto1.RegisterType((*DeleteDiskInfo)(nil), "proto.DeleteDiskInfo")
	proto1.RegisterType((*DeleteDiskResult)(nil), "proto.DeleteDiskResult")
	proto1.RegisterType((*ReadDiskInfo)(nil), "proto.ReadDiskInfo")
	proto1.RegisterType((*ReadDiskResult)(nil), "proto.ReadDiskResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IndependentDisk service

type IndependentDiskClient interface {
	Create(ctx context.Context, in *CreateDiskInfo, opts ...grpc.CallOption) (*CreateDiskResult, error)
	Read(ctx context.Context, in *ReadDiskInfo, opts ...grpc.CallOption) (*ReadDiskResult, error)
	Delete(ctx context.Context, in *DeleteDiskInfo, opts ...grpc.CallOption) (*DeleteDiskResult, error)
}

type independentDiskClient struct {
	cc *grpc.ClientConn
}

func NewIndependentDiskClient(cc *grpc.ClientConn) IndependentDiskClient {
	return &independentDiskClient{cc}
}

func (c *independentDiskClient) Create(ctx context.Context, in *CreateDiskInfo, opts ...grpc.CallOption) (*CreateDiskResult, error) {
	out := new(CreateDiskResult)
	err := grpc.Invoke(ctx, "/proto.IndependentDisk/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *independentDiskClient) Read(ctx context.Context, in *ReadDiskInfo, opts ...grpc.CallOption) (*ReadDiskResult, error) {
	out := new(ReadDiskResult)
	err := grpc.Invoke(ctx, "/proto.IndependentDisk/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *independentDiskClient) Delete(ctx context.Context, in *DeleteDiskInfo, opts ...grpc.CallOption) (*DeleteDiskResult, error) {
	out := new(DeleteDiskResult)
	err := grpc.Invoke(ctx, "/proto.IndependentDisk/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IndependentDisk service

type IndependentDiskServer interface {
	Create(context.Context, *CreateDiskInfo) (*CreateDiskResult, error)
	Read(context.Context, *ReadDiskInfo) (*ReadDiskResult, error)
	Delete(context.Context, *DeleteDiskInfo) (*DeleteDiskResult, error)
}

func RegisterIndependentDiskServer(s *grpc.Server, srv IndependentDiskServer) {
	s.RegisterService(&_IndependentDisk_serviceDesc, srv)
}

func _IndependentDisk_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndependentDiskServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IndependentDisk/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndependentDiskServer).Create(ctx, req.(*CreateDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndependentDisk_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndependentDiskServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IndependentDisk/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndependentDiskServer).Read(ctx, req.(*ReadDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndependentDisk_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndependentDiskServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IndependentDisk/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndependentDiskServer).Delete(ctx, req.(*DeleteDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndependentDisk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IndependentDisk",
	HandlerType: (*IndependentDiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IndependentDisk_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _IndependentDisk_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IndependentDisk_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/disk.proto",
}

func init() { proto1.RegisterFile("proto/disk.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xc7, 0x29, 0x1f, 0x2d, 0x8e, 0xa4, 0x34, 0x6b, 0x08, 0x2b, 0x27, 0xd2, 0x8b, 0x1e, 0x0c,
	0x26, 0xea, 0x89, 0x2b, 0x78, 0xe0, 0x60, 0x34, 0xd5, 0x3b, 0x69, 0xd9, 0xc1, 0x34, 0x60, 0xbb,
	0xe9, 0x6e, 0x4d, 0xf0, 0xe5, 0x7c, 0x20, 0x5f, 0xc2, 0xec, 0x6e, 0x5b, 0x3e, 0x0c, 0xe1, 0xe2,
	0xa9, 0xb3, 0xbf, 0x99, 0xfd, 0xcf, 0x7f, 0xa6, 0x0b, 0x1e, 0xcf, 0x52, 0x99, 0xde, 0xb2, 0x58,
	0xac, 0x46, 0x3a, 0x24, 0x2d, 0xfd, 0xf1, 0x7f, 0x2c, 0x70, 0x27, 0x19, 0x86, 0x12, 0xa7, 0xb1,
	0x58, 0xcd, 0x92, 0x65, 0x4a, 0x08, 0x34, 0x93, 0xf0, 0x03, 0xa9, 0x35, 0xb4, 0xae, 0xcf, 0x02,
	0x1d, 0x2b, 0x26, 0xe2, 0x2f, 0xa4, 0x75, 0xc3, 0x54, 0x4c, 0x2e, 0xa1, 0x1d, 0xe5, 0x62, 0x2e,
	0x37, 0x1c, 0x69, 0x43, 0x73, 0x27, 0xca, 0xc5, 0xdb, 0x86, 0x23, 0x19, 0x42, 0x47, 0xa5, 0x44,
	0x1e, 0x99, 0x74, 0x53, 0xa7, 0x21, 0xca, 0xc5, 0x6b, 0x1e, 0x15, 0x15, 0xe7, 0x0c, 0xc5, 0x22,
	0x8b, 0xb9, 0x8c, 0xd3, 0x84, 0xb6, 0x74, 0xc1, 0x2e, 0x22, 0x57, 0xd0, 0x15, 0x32, 0xcd, 0xc2,
	0x77, 0x9c, 0xf3, 0x2c, 0x5d, 0xc6, 0x6b, 0xa4, 0xb6, 0xae, 0x72, 0x0b, 0xfc, 0x62, 0x28, 0xf1,
	0xa0, 0xf1, 0xc9, 0x16, 0xd4, 0xd1, 0x49, 0x15, 0x92, 0x3e, 0x38, 0x6a, 0xd2, 0x79, 0xcc, 0x68,
	0x5b, 0x53, 0x5b, 0x1d, 0x67, 0xcc, 0x7f, 0x04, 0x6f, 0x3b, 0x6c, 0x80, 0x22, 0x5f, 0x4b, 0x42,
	0xc1, 0x59, 0x68, 0xc6, 0xf4, 0xc4, 0xed, 0xa0, 0x3c, 0xee, 0xca, 0xd4, 0xf7, 0x64, 0x9e, 0xc1,
	0x9d, 0xe2, 0x1a, 0x4f, 0xec, 0xec, 0xd8, 0xf5, 0xd2, 0x70, 0xa3, 0x32, 0xec, 0xdf, 0x80, 0xb7,
	0x15, 0x3c, 0xe5, 0xcb, 0x7f, 0x82, 0x4e, 0x80, 0x21, 0xfb, 0xaf, 0xe6, 0x13, 0x70, 0x4b, 0xb9,
	0x6d, 0x6b, 0x9e, 0xa1, 0xc0, 0x44, 0x96, 0xad, 0x8b, 0xe3, 0x51, 0xd9, 0xbb, 0x6f, 0x0b, 0xba,
	0xb3, 0x84, 0x21, 0xc7, 0x84, 0x61, 0x22, 0x95, 0x18, 0x19, 0x83, 0x6d, 0xb6, 0x4d, 0x7a, 0xe6,
	0xd1, 0x8d, 0xf6, 0x5f, 0xda, 0xa0, 0xff, 0x07, 0x1b, 0x03, 0x7e, 0x8d, 0x3c, 0x40, 0x53, 0x99,
	0x22, 0x17, 0x45, 0xc9, 0xee, 0xc0, 0x83, 0xde, 0x01, 0xac, 0x6e, 0x8d, 0xc1, 0x36, 0x7b, 0xac,
	0x3a, 0xee, 0xff, 0xa7, 0xaa, 0xe3, 0xe1, 0xb6, 0xfd, 0x5a, 0x64, 0xeb, 0xcc, 0xfd, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdc, 0xa5, 0x18, 0x8c, 0x2b, 0x03, 0x00, 0x00,
}
